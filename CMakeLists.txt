# Autogenerated by `mkbuild`; DO NOT EDIT!

cmake_minimum_required(VERSION 3.12.0)
project("mkgeoip")

include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(CheckCXXCompilerFlag)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)

if(("${WIN32}"))
  list(APPEND CMAKE_REQUIRED_LIBRARIES ws2_32 crypt32)
  if(("${MINGW}"))
    list(APPEND CMAKE_REQUIRED_LIBRARIES -static-libgcc -static-libstdc++)
  endif()
endif()

enable_testing()

if(("${WIN32}"))
  if(("${CMAKE_SIZEOF_VOID_P}" EQUAL 4))
    SET(MK_WIN32_ARCH "x86")
  elseif(("${CMAKE_SIZEOF_VOID_P}" EQUAL 8))
    SET(MK_WIN32_ARCH "x64")
  else()
    message(FATAL_ERROR "Neither 32 not 64 bit")
  endif()
endif()

#
# catch.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_1159)
if("${FAILURE_1159}")
  message(FATAL_ERROR "${FAILURE_1159}")
endif()
message(STATUS "download: https://github.com/catchorg/Catch2/releases/download/v2.3.0/catch.hpp")
file(DOWNLOAD https://github.com/catchorg/Catch2/releases/download/v2.3.0/catch.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/catch.hpp"
  EXPECTED_HASH SHA256=5eb8532fd5ec0d28433eba8a749102fd1f98078c5ebf35ad607fb2455a000004
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("catch.hpp" MK_HAVE_HEADER_1676)
if(NOT ("${MK_HAVE_HEADER_1676}"))
  message(FATAL_ERROR "cannot find: catch.hpp")
endif()

if(("${WIN32}"))

  #
  # windows-curl-7.61.1-1.tar.gz
  #

  message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_2057)
  if("${FAILURE_2057}")
    message(FATAL_ERROR "${FAILURE_2057}")
  endif()
  message(STATUS "download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    EXPECTED_HASH SHA256=424d2f18f0f74dd6a0128f0f4e59860b7d2f00c80bbf24b2702e9cac661357cf
    TLS_VERIFY ON)
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_2880)
  if("${FAILURE_2880}")
    message(FATAL_ERROR "${FAILURE_2880}")
  endif()
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_3125)
  if(NOT ("${MK_HAVE_HEADER_3125}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib" "curl_easy_init" "" MK_HAVE_LIB_3284)
  if(NOT ("${MK_HAVE_LIB_3284}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  LIST(APPEND CMAKE_REQUIRED_DEFINITIONS -DCURL_STATICLIB)
else()
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_3842)
  if(NOT ("${MK_HAVE_HEADER_3842}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("curl" "curl_easy_init" "" MK_HAVE_LIB_4001)
  if(NOT ("${MK_HAVE_LIB_4001}"))
    message(FATAL_ERROR "cannot find: curl")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "curl")
endif()

if(("${WIN32}"))

  #
  # windows-libmaxminddb-1.3.2-2.tar.gz
  #

  message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_4454)
  if("${FAILURE_4454}")
    message(FATAL_ERROR "${FAILURE_4454}")
  endif()
  message(STATUS "download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-libmaxminddb-1.3.2-2.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-libmaxminddb-1.3.2-2.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libmaxminddb-1.3.2-2.tar.gz"
    EXPECTED_HASH SHA256=542933912814ac518037bd26083d0bba9daf68084f43c5cf2d7ec944d62b9ebb
    TLS_VERIFY ON)
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libmaxminddb-1.3.2-2.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-libmaxminddb-1.3.2-2.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_5312)
  if("${FAILURE_5312}")
    message(FATAL_ERROR "${FAILURE_5312}")
  endif()
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libmaxminddb/1.3.2-2/${MK_WIN32_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("maxminddb.h" MK_HAVE_HEADER_5564)
  if(NOT ("${MK_HAVE_HEADER_5564}"))
    message(FATAL_ERROR "cannot find: maxminddb.h")
  endif()
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libmaxminddb/1.3.2-2/${MK_WIN32_ARCH}/lib/maxminddb.lib" "MMDB_open" "" MK_HAVE_LIB_5723)
  if(NOT ("${MK_HAVE_LIB_5723}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libmaxminddb/1.3.2-2/${MK_WIN32_ARCH}/lib/maxminddb.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/libmaxminddb/1.3.2-2/${MK_WIN32_ARCH}/lib/maxminddb.lib")
else()
  CHECK_INCLUDE_FILE_CXX("maxminddb.h" MK_HAVE_HEADER_6244)
  if(NOT ("${MK_HAVE_HEADER_6244}"))
    message(FATAL_ERROR "cannot find: maxminddb.h")
  endif()
  CHECK_LIBRARY_EXISTS("maxminddb" "MMDB_open" "" MK_HAVE_LIB_6403)
  if(NOT ("${MK_HAVE_LIB_6403}"))
    message(FATAL_ERROR "cannot find: maxminddb")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "maxminddb")
endif()

#
# generic-assets-20190205.tar.gz
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_6831)
if("${FAILURE_6831}")
  message(FATAL_ERROR "${FAILURE_6831}")
endif()
message(STATUS "download: https://github.com/measurement-kit/generic-assets/releases/download/20190205/generic-assets-20190205.tar.gz")
file(DOWNLOAD https://github.com/measurement-kit/generic-assets/releases/download/20190205/generic-assets-20190205.tar.gz
  "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190205.tar.gz"
  EXPECTED_HASH SHA256=e7826c2575bacbc1aeccf64f10bfdf128c7ab38e6f5d17876775937986499df7
  TLS_VERIFY ON)
message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190205.tar.gz")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190205.tar.gz"
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_7650)
if("${FAILURE_7650}")
  message(FATAL_ERROR "${FAILURE_7650}")
endif()

#
# mkdata.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_7937)
if("${FAILURE_7937}")
  message(FATAL_ERROR "${FAILURE_7937}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkdata/v0.3.0/mkdata.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkdata/v0.3.0/mkdata.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkdata.hpp"
  EXPECTED_HASH SHA256=96bb0384ecd7231a861111d8818a560b7d5ca83316cf7946a4f1a352db6ecfe3
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkdata.hpp" MK_HAVE_HEADER_8465)
if(NOT ("${MK_HAVE_HEADER_8465}"))
  message(FATAL_ERROR "cannot find: mkdata.hpp")
endif()

#
# mkcurl.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_8798)
if("${FAILURE_8798}")
  message(FATAL_ERROR "${FAILURE_8798}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkcurl/v0.9.3/mkcurl.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkcurl/v0.9.3/mkcurl.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkcurl.hpp"
  EXPECTED_HASH SHA256=1f301bb3d8e254a8ee40eac44373c2cfa9648d0d3ea96485e9231817aaf18076
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkcurl.hpp" MK_HAVE_HEADER_9326)
if(NOT ("${MK_HAVE_HEADER_9326}"))
  message(FATAL_ERROR "cannot find: mkcurl.hpp")
endif()

#
# mkiplookup.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_9663)
if("${FAILURE_9663}")
  message(FATAL_ERROR "${FAILURE_9663}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkiplookup/v0.2.0/mkiplookup.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkiplookup/v0.2.0/mkiplookup.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkiplookup.hpp"
  EXPECTED_HASH SHA256=a815119250d09be5eff332289f90fd872910f3dc9f29bb4a5fe60e272b38174f
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkiplookup.hpp" MK_HAVE_HEADER_10211)
if(NOT ("${MK_HAVE_HEADER_10211}"))
  message(FATAL_ERROR "cannot find: mkiplookup.hpp")
endif()

#
# mkmmdb.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_10554)
if("${FAILURE_10554}")
  message(FATAL_ERROR "${FAILURE_10554}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkmmdb/v0.4.0/mkmmdb.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkmmdb/v0.4.0/mkmmdb.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkmmdb.hpp"
  EXPECTED_HASH SHA256=c1cdcf2980c977a0d4abbdd447ddc19eefdfe6faa42b3be752d50f29930d4a87
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkmmdb.hpp" MK_HAVE_HEADER_11085)
if(NOT ("${MK_HAVE_HEADER_11085}"))
  message(FATAL_ERROR "cannot find: mkmmdb.hpp")
endif()

#
# mkmock.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_11420)
if("${FAILURE_11420}")
  message(FATAL_ERROR "${FAILURE_11420}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkmock.hpp"
  EXPECTED_HASH SHA256=f07bc063a2e64484482f986501003e45ead653ea3f53fadbdb45c17a51d916d2
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkmock.hpp" MK_HAVE_HEADER_11951)
if(NOT ("${MK_HAVE_HEADER_11951}"))
  message(FATAL_ERROR "cannot find: mkmock.hpp")
endif()

#
# Set restrictive compiler flags
#

macro(MKSetRestrictiveCompilerFlags)
  if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR
     ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang"))
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Werror")
    # https://www.owasp.org/index.php/C-Based_Toolchain_Hardening_Cheat_Sheet
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wall")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wextra")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wconversion")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wcast-align")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat=2")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat-security")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fno-common")
    # Some options are only supported by GCC when we're compiling C code:
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-prototypes")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-prototypes")
    else()
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wmissing-prototypes")
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wstrict-prototypes")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-declarations")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-overflow")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wtrampolines")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Woverloaded-virtual")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wreorder")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wsign-promo")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wnon-virtual-dtor")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fstack-protector-all")
    if(NOT "${APPLE}")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,noexecstack")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,now")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,relro")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodlopen")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodump")
    endif()
    add_definitions(-D_FORTIFY_SOURCES=2)
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # TODO(bassosimone): add support for /Wall and /analyze
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} /WX /W4 /EHs")
    set(MK_LD_FLAGS "${MK_LD_FLAGS} /WX")
  else()
    message(FATAL_ERROR "Compiler not supported: ${CMAKE_CXX_COMPILER_ID}")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MK_COMMON_FLAGS} ${MK_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MK_COMMON_FLAGS} ${MK_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MK_LD_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MK_LD_FLAGS}")
  if("${WIN32}")
    add_definitions(-D_WIN32_WINNT=0x0600) # for NI_NUMERICSERV and WSAPoll
  endif()
endmacro()

MKSetRestrictiveCompilerFlags()

#
# Prepare for compiling targets
#

add_definitions(${CMAKE_REQUIRED_DEFINITIONS})
include_directories(${CMAKE_REQUIRED_INCLUDES})

#
# mkgeoip
#

add_library(
  mkgeoip
  mkgeoip.cpp
)
target_link_libraries(
  mkgeoip
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# mkgeoip-client
#

add_executable(
  mkgeoip-client
  mkgeoip-client.cpp
)
target_link_libraries(
  mkgeoip-client
  mkgeoip
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# tests
#

add_executable(
  tests
  tests.cpp
)
target_link_libraries(
  tests
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# test: basic_test
#

add_test(
  NAME basic_test COMMAND mkgeoip-client
)

#
# test: mocked_tests
#

add_test(
  NAME mocked_tests COMMAND tests
)
